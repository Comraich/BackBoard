// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('GhostDB');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.sales.drop();

// Insert a few documents into the sales collection.
db.private_messages.insertMany([
  { 'MessageId': '0e172c6e-e83e-4117-b27d-766e93a5ff2e', 'Recipient': '654696cf-42e6-43ba-b144-5125e200cabb', 'Payload': 'Et eller annet fjas i', 'date': new Date('2014-03-01T08:00:00Z') },
  { 'MessageId': 'f81c076a-b859-4bd1-af09-d4270b5e0fc1', 'Recipient': '654696cf-42e6-43ba-b144-5125e200cabb', 'Payload': 'Et eller annet annet fjas, rett under forrige fjas', 'date': new Date('2014-04-01T08:00:00Z')},
]);

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);

namespace BackBoard.Model
{
    public class PrivateMsg
    {
        [BsonId]
        [BsonRepresentation(BsonType.ObjectId)]
        public Guid MessageId { get; set; }
        
        [BsonElement("Recipient")]
        public Guid Recipent { get; set; }
        public String Payload { get; set; }
    }
}
